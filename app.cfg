var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
var Mmu = xdc.useModule('ti.sysbios.family.arm.arm9.Mmu');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Memory = xdc.useModule('xdc.runtime.Memory');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Queue = xdc.useModule('ti.sysbios.knl.Queue');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 246800;

/* System stack size (used by ISRs and Swis) */
Program.stack = 2048;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 128;

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

/*
 * Build a custom BIOS library.  The custom library will be smaller than the
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;
LoggingSetup.loadTaskLogging = false;
Mmu.enableMMU = false;
Idle.idleFxns[0] = null;
LoggingSetup.sysbiosSwiLogging = true;
Idle.idleFxns[1] = null;
Task.numPriorities = 32;
Task.defaultStackSize = 2048;
Task.deleteTerminatedTasks = false;
Idle.idleFxns[2] = null;
BIOS.heapTrackEnabled = true;
Clock.tickPeriod = 5000;
Memory.defaultHeapSize = 10240;
Clock.tickSource = Clock.TickSource_TIMER;
BIOS.cpuFreq.lo = 456000000;
Clock.timerId = 1;
var queue0Params = new Queue.Params();
queue0Params.instance.name = "queue_err";
Program.global.queue_err = Queue.create(queue0Params);
var mailbox0Params = new Mailbox.Params();
mailbox0Params.instance.name = "mailbox_event";
Program.global.mailbox_event = Mailbox.create(8, 20, mailbox0Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "sema_err";
semaphore0Params.mode = Semaphore.Mode_COUNTING_PRIORITY;
Program.global.sema_err = Semaphore.create(null, semaphore0Params);
var mailbox1Params = new Mailbox.Params();
mailbox1Params.instance.name = "mailbox_comm";
Program.global.mailbox_comm = Mailbox.create(20, 10, mailbox1Params);
var clock0Params = new Clock.Params();
clock0Params.instance.name = "clock0";
clock0Params.period = 100;
clock0Params.arg = null;
clock0Params.startFlag = true;
Program.global.clock0 = Clock.create("&IsrClock", 100, clock0Params);
var clock1Params = new Clock.Params();
clock1Params.instance.name = "clock1";
clock1Params.startFlag = true;
clock1Params.period = 10;
Program.global.clock1 = Clock.create("&IsrAdc", 10, clock1Params);
